{"version":3,"sources":["firebase.js","Components/SiderbarChat.js","Components/StateProvider.js","Components/Sidebar.js","Components/Chat.js","Components/reducer.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SiderbarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","photoURL","IconButton","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toLocaleTimeString","displayName","onChange","e","target","disabled","preventDefault","FieldValue","serverTimestamp","Button","actionTypes","state","action","Login","dispatch","alt","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.920ba2fe.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBTFfpQjvrwu9pe1G0oA7AGdmPwQY1A54I\",\r\n    authDomain: \"whatsapp-clone-cde1c.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-cde1c.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-cde1c\",\r\n    storageBucket: \"whatsapp-clone-cde1c.appspot.com\",\r\n    messagingSenderId: \"577580844783\",\r\n    appId: \"1:577580844783:web:59b2289a290de2aed4bd1a\",\r\n    measurementId: \"G-4Z4GZC7Y5Z\"\r\n  };\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../ComponentCss/SidebarChat.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport db from \"../firebase\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SiderbarChat({ id, name, addNewChat }) {\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [messages, setMessages] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    if (id) {\r\n      unsubscribe = db\r\n        .collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = setSeed(Math.floor(Math.random() * 5436));\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt(\"Please enter name for chat room\");\r\n    if (roomName) {\r\n      //do something inside here\r\n      db.collection(\"rooms\").add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2> {name} </h2> <p> {messages[0]?.message} </p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className=\"sidebarChat sidebarChat__text\">\r\n      <h2> Add Chat Room </h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SiderbarChat;\r\n","/** @format */\r\n\r\nimport React, { createContext, useContext, useReducer } from \"react\";\r\n//This is the data layer\r\nexport const StateContext = createContext();\r\n//Build a provider\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\n// This is how we use it inside of a component, that is pulling data(information) from the data layer\r\nexport const useStateValue = () => useContext(StateContext);\r\n","/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../ComponentCss/Sidebar.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\r\nimport SidebarChat from \"./SiderbarChat\";\r\nimport db from \"../firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Sidebar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) => {\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      );\r\n    });\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      {\" \"}\r\n      {/* for the header */}{\" \"}\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL} />\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>{\" \"}\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>{\" \"}\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>{\" \"}\r\n        </div>{\" \"}\r\n      </div>{\" \"}\r\n      {/* for the search icon */}{\" \"}\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlinedIcon />\r\n          <input placeholder=\"search or start a new chat\" type=\"text\" />\r\n        </div>\r\n      </div>{\" \"}\r\n      {/* for the chat room section */}{\" \"}\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat addNewChat />{\" \"}\r\n        {rooms.map((room) => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}{\" \"}\r\n      </div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","/** @format */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../ComponentCss/Chat.css\";\r\nimport { Avatar, IconButton, Button } from \"@material-ui/core\";\r\nimport SearchOutlinedIcon from \"@material-ui/icons/SearchOutlined\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport db from \"../firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n  const [input, setInput] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  // capturing the room name from the database through the roomId\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    if (roomId) {\r\n      unsubscribe = db\r\n        .collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snapshot) => setRoomName(snapshot.data().name));\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [roomId]);\r\n\r\n  //function for sending the\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    if (input !== \"\") {\r\n      db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n        name: user.displayName,\r\n        message: input,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      });\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar\r\n          src={`https://avatars.dicebear.com/api/human/${Math.floor(\r\n            Math.random() * 12436\r\n          )}.svg`}\r\n        />\r\n        <div className=\"chat__headerInfo\">\r\n          <h4> {roomName} </h4>{\" \"}\r\n          <p>\r\n            {\" \"}\r\n            Last seen{\" \"}\r\n            {new Date(\r\n              messages[messages.length - 1]?.timestamp?.toDate()\r\n            ).toLocaleTimeString()}{\" \"}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlinedIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages.map((message) => (\r\n          <p\r\n            key={Math.random()}\r\n            className={`chat__message ${\r\n              message.name === user.displayName && \"chat__reciever\"\r\n            }`}\r\n          >\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat__timestamp\">\r\n              {new Date(message.timestamp?.toDate()).toLocaleTimeString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <IconButton>\r\n          <InsertEmoticonIcon />\r\n        </IconButton>\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"...type a message\"\r\n          />\r\n          <IconButton\r\n            disabled={!input}\r\n            className=\"chat__footerButton\"\r\n            onClick={sendMessage}\r\n            type=\"submit\"\r\n          >\r\n            <Button className=\"chat__footerButton\">Send</Button>\r\n          </IconButton>\r\n        </form>\r\n        <IconButton>\r\n          <MicIcon />\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","/** @format */\r\n\r\n/* This is how the data layer looks before anything happens to it ,\r\nin a nuts shell its original state as a user not being logged in */\r\nexport const initialState = {\r\n  user: null,\r\n};\r\n// these are certain actions that push information into the data layer\r\n//for example when a user is signed in this action will push the user into the data layer to\r\n//carry out an action\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n};\r\n\r\n//When an action is sent out(dispatched) it looks(listens) at\r\n//the dispatched info and returns how we intend\r\n//to change the datalayer but does not tamper with information already in the state\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    //if anyother thing just go back to the way things were before\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","/** @format */\r\n\r\nimport React from \"react\";\r\nimport \"../ComponentCss/Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"../firebase\";\r\nimport { useStateValue } from \"../Components/StateProvider\";\r\nimport { actionTypes } from \"../Components/reducer\";\r\n\r\nfunction Login() {\r\n  //to pull data from the data layer\r\n  const [{}, dispatch] = useStateValue();\r\n\r\n  const signIn = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) => {\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        });\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <h2>Welcome to IM Chatroom</h2>\r\n        <img\r\n          src=\"https://www.kindpng.com/picc/m/150-1509098_text-message-logo-png-message-icon-png-transparent.png\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"login__text\">\r\n          <h1>Sign In</h1>\r\n        </div>\r\n        <Button type=\"submit\" onClick={signIn}>\r\n          Sign In with Google\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","/** @format */\n\nimport React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Components/Sidebar\";\nimport Chat from \"./Components/Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Components/Login\";\nimport { useStateValue } from \"./Components/StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/\">{/* <Chat /> */}</Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { StateProvider } from \"./Components/StateProvider\";\nimport reducer, { initialState } from \"./Components/reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}